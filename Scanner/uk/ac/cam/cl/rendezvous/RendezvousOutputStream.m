//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/adamroberts/Documents/Workspace6/JRendezvous/src/uk/ac/cam/cl/rendezvous/RendezvousOutputStream.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RendezvousChannel.h"
#include "RendezvousOutputStream.h"
#include "StatusResponse.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/net/HttpURLConnection.h"

@interface UkAcCamClRendezvousRendezvousOutputStream () {
 @public
  UkAcCamClRendezvousRendezvousChannel *rendezvousChannel_;
  volatile_jboolean isOpen_;
}

@end

J2OBJC_FIELD_SETTER(UkAcCamClRendezvousRendezvousOutputStream, rendezvousChannel_, UkAcCamClRendezvousRendezvousChannel *)

#line 1 "/Users/adamroberts/Documents/Workspace6/JRendezvous/src/uk/ac/cam/cl/rendezvous/RendezvousOutputStream.java"


#line 11
@implementation UkAcCamClRendezvousRendezvousOutputStream


#line 16
- (instancetype)initWithUkAcCamClRendezvousRendezvousChannel:(UkAcCamClRendezvousRendezvousChannel *)rendezvousChannel {
  UkAcCamClRendezvousRendezvousOutputStream_initWithUkAcCamClRendezvousRendezvousChannel_(self, rendezvousChannel);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  
#line 23
  IOSByteArray *bytes;
  if (off > 0 || len < ((IOSByteArray *) nil_chk(b))->size_) {
    bytes = [IOSByteArray newArrayWithLength:len - off];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, off, bytes, 0, len);
  }
  else {
    
#line 28
    bytes = b;
  }
  
#line 31
  while (JreLoadVolatileBoolean(&isOpen_)) {
    JavaNetHttpURLConnection *connection = [((UkAcCamClRendezvousRendezvousChannel *) nil_chk(rendezvousChannel_)) attemptWriteWithByteArray:bytes];
    
#line 35
    UkAcCamClRendezvousStatusResponse *response = UkAcCamClRendezvousStatusResponse_fromConnectionWithJavaNetHttpURLConnection_(connection);
    if (((UkAcCamClRendezvousStatusResponse *) nil_chk(response))->code_ == 0) {
      
#line 38
      return;
    }
    else
#line 39
    if (response->code_ == UkAcCamClRendezvousStatusResponse_TIMED_OUT) {
    }
    else {
      
#line 45
      @throw new_JavaIoIOException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 46
      @"inavlid rendezvous response code: %d %s", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 47
      response->code_),
#line 48
      response->message_ } count:2 type:NSObject_class_()]));
    }
  }
  
#line 52
  @throw new_JavaIoIOException_initWithNSString_(@"write to rendezvous which has been closed");
}


#line 56
- (void)writeWithInt:(jint)b {
  [self writeWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) b } count:1] withInt:0 withInt:1];
}


#line 65
- (void)close {
  JreAssignVolatileBoolean(&isOpen_, false);
  [super close];
}

- (jboolean)isOpen {
  return JreLoadVolatileBoolean(&isOpen_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithUkAcCamClRendezvousRendezvousChannel:);
  methods[1].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(writeWithInt:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(isOpen);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rendezvousChannel_", "LUkAcCamClRendezvousRendezvousChannel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isOpen_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LUkAcCamClRendezvousRendezvousChannel;", "write", "[BII", "LJavaIoIOException;", "I" };
  static const J2ObjcClassInfo _UkAcCamClRendezvousRendezvousOutputStream = { "RendezvousOutputStream", "uk.ac.cam.cl.rendezvous", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_UkAcCamClRendezvousRendezvousOutputStream;
}

@end


#line 16
void UkAcCamClRendezvousRendezvousOutputStream_initWithUkAcCamClRendezvousRendezvousChannel_(UkAcCamClRendezvousRendezvousOutputStream *self, UkAcCamClRendezvousRendezvousChannel *rendezvousChannel) {
  JavaIoOutputStream_init(self);
  JreAssignVolatileBoolean(&self->isOpen_,
#line 14
  true);
  
#line 17
  self->rendezvousChannel_ = rendezvousChannel;
}


#line 16
UkAcCamClRendezvousRendezvousOutputStream *new_UkAcCamClRendezvousRendezvousOutputStream_initWithUkAcCamClRendezvousRendezvousChannel_(UkAcCamClRendezvousRendezvousChannel *rendezvousChannel) {
  J2OBJC_NEW_IMPL(UkAcCamClRendezvousRendezvousOutputStream, initWithUkAcCamClRendezvousRendezvousChannel_, rendezvousChannel)
}


#line 16
UkAcCamClRendezvousRendezvousOutputStream *create_UkAcCamClRendezvousRendezvousOutputStream_initWithUkAcCamClRendezvousRendezvousChannel_(UkAcCamClRendezvousRendezvousChannel *rendezvousChannel) {
  J2OBJC_CREATE_IMPL(UkAcCamClRendezvousRendezvousOutputStream, initWithUkAcCamClRendezvousRendezvousChannel_, rendezvousChannel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(UkAcCamClRendezvousRendezvousOutputStream)
