//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/adamroberts/Documents/Workspace6/JRendezvous/src/uk/ac/cam/cl/rendezvous/RendezvousInputStream.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IOUtils.h"
#include "J2ObjC_source.h"
#include "RendezvousChannel.h"
#include "RendezvousInputStream.h"
#include "StatusResponse.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/net/HttpURLConnection.h"

@interface UkAcCamClRendezvousRendezvousInputStream () {
 @public
  UkAcCamClRendezvousRendezvousChannel *rendezvousChannel_;
  IOSByteArray *buffer_;
  jint r_;
  volatile_jboolean isOpen_;
}

- (jint)readFromRendezvous;

@end

J2OBJC_FIELD_SETTER(UkAcCamClRendezvousRendezvousInputStream, rendezvousChannel_, UkAcCamClRendezvousRendezvousChannel *)
J2OBJC_FIELD_SETTER(UkAcCamClRendezvousRendezvousInputStream, buffer_, IOSByteArray *)

__attribute__((unused)) static jint UkAcCamClRendezvousRendezvousInputStream_readFromRendezvous(UkAcCamClRendezvousRendezvousInputStream *self);

#line 1 "/Users/adamroberts/Documents/Workspace6/JRendezvous/src/uk/ac/cam/cl/rendezvous/RendezvousInputStream.java"


#line 19
@implementation UkAcCamClRendezvousRendezvousInputStream


#line 31
- (instancetype)initWithUkAcCamClRendezvousRendezvousChannel:(UkAcCamClRendezvousRendezvousChannel *)rendezvousChannel {
  UkAcCamClRendezvousRendezvousInputStream_initWithUkAcCamClRendezvousRendezvousChannel_(self, rendezvousChannel);
  return self;
}


#line 35
- (jint)readFromRendezvous {
  return UkAcCamClRendezvousRendezvousInputStream_readFromRendezvous(self);
}


#line 75
- (jint)read {
  if (r_ >= ((IOSByteArray *) nil_chk(buffer_))->size_) {
    if (UkAcCamClRendezvousRendezvousInputStream_readFromRendezvous(self) < 0) {
      return -1;
    }
  }
  jint mask = (jint) 0xff;
  return mask & (IOSByteArray_Get(nil_chk(buffer_), r_++));
}


#line 86
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  jint read = 0;
  
#line 89
  while (read < (len - off)) {
    
#line 91
    if (r_ >= ((IOSByteArray *) nil_chk(buffer_))->size_) {
      if (UkAcCamClRendezvousRendezvousInputStream_readFromRendezvous(self) < 0) {
        
#line 94
        return read;
      }
    }
    
#line 98
    jint amt = JavaLangMath_minWithInt_withInt_(len - (off + read), ((IOSByteArray *) nil_chk(buffer_))->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, r_, b, off + read, amt);
    read += amt;
    r_ += amt;
  }
  
#line 104
  return read;
}


#line 108
- (jint)readWithByteArray:(IOSByteArray *)b {
  return [self readWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}


#line 113
- (jint)available {
  return ((IOSByteArray *) nil_chk(buffer_))->size_ - r_;
}


#line 125
- (jboolean)isOpen {
  return JreLoadVolatileBoolean(&isOpen_);
}


#line 133
- (void)close {
  [super close];
  JreAssignVolatileBoolean(&isOpen_, false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithUkAcCamClRendezvousRendezvousChannel:);
  methods[1].selector = @selector(readFromRendezvous);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(readWithByteArray:);
  methods[5].selector = @selector(available);
  methods[6].selector = @selector(isOpen);
  methods[7].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rendezvousChannel_", "LUkAcCamClRendezvousRendezvousChannel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "r_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isOpen_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LUkAcCamClRendezvousRendezvousChannel;", "LJavaIoIOException;", "read", "[BII", "[B" };
  static const J2ObjcClassInfo _UkAcCamClRendezvousRendezvousInputStream = { "RendezvousInputStream", "uk.ac.cam.cl.rendezvous", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_UkAcCamClRendezvousRendezvousInputStream;
}

@end


#line 31
void UkAcCamClRendezvousRendezvousInputStream_initWithUkAcCamClRendezvousRendezvousChannel_(UkAcCamClRendezvousRendezvousInputStream *self, UkAcCamClRendezvousRendezvousChannel *rendezvousChannel) {
  JavaIoInputStream_init(self);
  self->buffer_ = [IOSByteArray newArrayWithLength:
#line 22
  0];
  self->r_ = 0;
  JreAssignVolatileBoolean(&self->isOpen_, true);
  
#line 32
  self->rendezvousChannel_ = rendezvousChannel;
}


#line 31
UkAcCamClRendezvousRendezvousInputStream *new_UkAcCamClRendezvousRendezvousInputStream_initWithUkAcCamClRendezvousRendezvousChannel_(UkAcCamClRendezvousRendezvousChannel *rendezvousChannel) {
  J2OBJC_NEW_IMPL(UkAcCamClRendezvousRendezvousInputStream, initWithUkAcCamClRendezvousRendezvousChannel_, rendezvousChannel)
}


#line 31
UkAcCamClRendezvousRendezvousInputStream *create_UkAcCamClRendezvousRendezvousInputStream_initWithUkAcCamClRendezvousRendezvousChannel_(UkAcCamClRendezvousRendezvousChannel *rendezvousChannel) {
  J2OBJC_CREATE_IMPL(UkAcCamClRendezvousRendezvousInputStream, initWithUkAcCamClRendezvousRendezvousChannel_, rendezvousChannel)
}

jint UkAcCamClRendezvousRendezvousInputStream_readFromRendezvous(UkAcCamClRendezvousRendezvousInputStream *self) {
  while (JreLoadVolatileBoolean(&self->isOpen_)) {
    JavaNetHttpURLConnection *connection = [((UkAcCamClRendezvousRendezvousChannel *) nil_chk(self->rendezvousChannel_)) attemptRead];
    
#line 40
    NSString *contentType = [((JavaNetHttpURLConnection *) nil_chk(connection)) getContentType];
    
#line 42
    if ([((NSString *) nil_chk(contentType)) isEqual:@"application/octet-stream"]) {
      
#line 45
      jint len = [connection getContentLength];
      self->buffer_ = [IOSByteArray newArrayWithLength:len];
      OrgApacheCommonsIoIOUtils_readFullyWithJavaIoInputStream_withByteArray_([connection getInputStream], self->buffer_);
      self->r_ = 0;
      return len;
    }
    else
#line 50
    if ([contentType isEqual:@"application/json"]) {
      
#line 52
      UkAcCamClRendezvousStatusResponse *response = UkAcCamClRendezvousStatusResponse_fromConnectionWithJavaNetHttpURLConnection_(connection);
      if (((UkAcCamClRendezvousStatusResponse *) nil_chk(response))->code_ == UkAcCamClRendezvousStatusResponse_TIMED_OUT) {
      }
      else
#line 57
      if (response->code_ == UkAcCamClRendezvousStatusResponse_CLOSED) {
        
#line 59
        return -1;
      }
      else {
        @throw new_JavaIoIOException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 63
        @"inavlid rendezvous response code: %d %s", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 64
        response->code_),
#line 65
        response->message_ } count:2 type:NSObject_class_()]));
      }
    }
  }
  
#line 71
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(UkAcCamClRendezvousRendezvousInputStream)
