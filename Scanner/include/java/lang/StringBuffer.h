//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/objc/java/java/lang/StringBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangStringBuffer")
#ifdef RESTRICT_JavaLangStringBuffer
#define INCLUDE_ALL_JavaLangStringBuffer 0
#else
#define INCLUDE_ALL_JavaLangStringBuffer 1
#endif
#undef RESTRICT_JavaLangStringBuffer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangStringBuffer_) && (INCLUDE_ALL_JavaLangStringBuffer || defined(INCLUDE_JavaLangStringBuffer))
#define JavaLangStringBuffer_

#define RESTRICT_JavaLangAbstractStringBuilder 1
#define INCLUDE_JavaLangAbstractStringBuilder 1
#include "java/lang/AbstractStringBuilder.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangCharSequence 1
#define INCLUDE_JavaLangCharSequence 1
#include "java/lang/CharSequence.h"

@class IOSCharArray;

/*!
 @brief A thread-safe, mutable sequence of characters.
 A string buffer is like a <code>String</code>, but can be modified. At any
 point in time it contains some particular sequence of characters, but
 the length and content of the sequence can be changed through certain
 method calls.
 <p>
 String buffers are safe for use by multiple threads. The methods
 are synchronized where necessary so that all the operations on any
 particular instance behave as if they occur in some serial order
 that is consistent with the order of the method calls made by each of
 the individual threads involved.
 <p>
 The principal operations on a <code>StringBuffer</code> are the
 <code>append</code> and <code>insert</code> methods, which are
 overloaded so as to accept data of any type. Each effectively
 converts a given datum to a string and then appends or inserts the
 characters of that string to the string buffer. The
 <code>append</code> method always adds these characters at the end
 of the buffer; the <code>insert</code> method adds the characters at
 a specified point.
 <p>
 For example, if <code>z</code> refers to a string buffer object
 whose current contents are <code>"start"</code>, then
 the method call <code>z.append("le")</code> would cause the string
 buffer to contain <code>"startle"</code>, whereas
 <code>z.insert(4, "le")</code> would alter the string buffer to
 contain <code>"starlet"</code>.
 <p>
 In general, if sb refers to an instance of a <code>StringBuffer</code>,
 then <code>sb.append(x)</code> has the same effect as
 <code>sb.insert(sb.length(), x)</code>.
 <p>
 Whenever an operation occurs involving a source sequence (such as
 appending or inserting from a source sequence), this class synchronizes
 only on the string buffer performing the operation, not on the source.
 Note that while <code>StringBuffer</code> is designed to be safe to use
 concurrently from multiple threads, if the constructor or the
 <code>append</code> or <code>insert</code> operation is passed a source sequence
 that is shared across threads, the calling code must ensure
 that the operation has a consistent and unchanging view of the source
 sequence for the duration of the operation.
 This could be satisfied by the caller holding a lock during the
 operation's call, by using an immutable source sequence, or by not
 sharing the source sequence across threads.
 <p>
 Every string buffer has a capacity. As long as the length of the
 character sequence contained in the string buffer does not exceed
 the capacity, it is not necessary to allocate a new internal
 buffer array. If the internal buffer overflows, it is
 automatically made larger.
 <p>
 Unless otherwise noted, passing a <code>null</code> argument to a constructor
 or method in this class will cause a <code>NullPointerException</code> to be
 thrown.
 <p>
 As of  release JDK 5, this class has been supplemented with an equivalent
 class designed for use by a single thread, <code>StringBuilder</code>.  The
 <code>StringBuilder</code> class should generally be used in preference to
 this one, as it supports all of the same operations but it is faster, as
 it performs no synchronization.
 @author Arthur van Hoff
 - seealso: java.lang.StringBuilder
 - seealso: java.lang.String
 @since JDK1.0
 */
@interface JavaLangStringBuffer : JavaLangAbstractStringBuilder < JavaIoSerializable, JavaLangCharSequence >

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Constructs a string buffer with no characters in it and an
 initial capacity of 16 characters.
 */
- (instancetype)init;

/*!
 @brief Constructs a string buffer that contains the same characters
 as the specified <code>CharSequence</code>.
 The initial capacity of
 the string buffer is <code>16</code> plus the length of the
 <code>CharSequence</code> argument.
 <p>
 If the length of the specified <code>CharSequence</code> is
 less than or equal to zero, then an empty buffer of capacity
 <code>16</code> is returned.
 @param seq   the sequence to copy.
 @since 1.5
 */
- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq;

/*!
 @brief Constructs a string buffer with no characters in it and
 the specified initial capacity.
 @param capacity  the initial capacity.
 @exception NegativeArraySizeException  if the <code>capacity</code>
 argument is less than <code>0</code>.
 */
- (instancetype)initWithInt:(jint)capacity;

/*!
 @brief Constructs a string buffer initialized to the contents of the
 specified string.
 The initial capacity of the string buffer is
 <code>16</code> plus the length of the string argument.
 @param str   the initial contents of the buffer.
 */
- (instancetype)initWithNSString:(NSString *)str;

- (JavaLangStringBuffer *)appendWithBoolean:(jboolean)b;

- (JavaLangStringBuffer *)appendWithChar:(jchar)c;

- (JavaLangStringBuffer *)appendWithCharArray:(IOSCharArray *)str;

/*!
 @throws IndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)appendWithCharArray:(IOSCharArray *)str
                                      withInt:(jint)offset
                                      withInt:(jint)len;

/*!
 @brief Appends the specified <code>CharSequence</code> to this
 sequence.
 <p>
 The characters of the <code>CharSequence</code> argument are appended,
 in order, increasing the length of this sequence by the length of the
 argument.
 <p>The result of this method is exactly the same as if it were an
 invocation of this.append(s, 0, s.length());
 <p>This method synchronizes on <code>this</code>, the destination
 object, but does not synchronize on the source (<code>s</code>).
 <p>If <code>s</code> is <code>null</code>, then the four characters
 <code>"null"</code> are appended.
 @param s the <code>CharSequence</code> to append.
 @return a reference to this object.
 @since 1.5
 */
- (JavaLangStringBuffer *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

/*!
 @throws IndexOutOfBoundsException
 @since 1.5
 */
- (JavaLangStringBuffer *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                 withInt:(jint)start
                                                 withInt:(jint)end;

- (JavaLangStringBuffer *)appendWithDouble:(jdouble)d;

- (JavaLangStringBuffer *)appendWithFloat:(jfloat)f;

- (JavaLangStringBuffer *)appendWithInt:(jint)i;

- (JavaLangStringBuffer *)appendWithLong:(jlong)lng;

- (JavaLangStringBuffer *)appendWithId:(id)obj;

- (JavaLangStringBuffer *)appendWithNSString:(NSString *)str;

/*!
 @brief Appends the specified <code>StringBuffer</code> to this sequence.
 <p>
 The characters of the <code>StringBuffer</code> argument are appended,
 in order, to the contents of this <code>StringBuffer</code>, increasing the
 length of this <code>StringBuffer</code> by the length of the argument.
 If <code>sb</code> is <code>null</code>, then the four characters
 <code>"null"</code> are appended to this <code>StringBuffer</code>.
 <p>
 Let <i>n</i> be the length of the old character sequence, the one
 contained in the <code>StringBuffer</code> just prior to execution of the
 <code>append</code> method. Then the character at index <i>k</i> in
 the new character sequence is equal to the character at index <i>k</i>
 in the old character sequence, if <i>k</i> is less than <i>n</i>;
 otherwise, it is equal to the character at index <i>k-n</i> in the
 argument <code>sb</code>.
 <p>
 This method synchronizes on <code>this</code>, the destination
 object, but does not synchronize on the source (<code>sb</code>).
 @param sb   the <code>StringBuffer</code> to append.
 @return a reference to this object.
 @since 1.4
 */
- (JavaLangStringBuffer *)appendWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb;

/*!
 @since 1.5
 */
- (JavaLangStringBuffer *)appendCodePointWithInt:(jint)codePoint;

- (jint)capacity;

/*!
 @throws IndexOutOfBoundsException
 - seealso: #length()
 */
- (jchar)charAtWithInt:(jint)index;

/*!
 @since 1.5
 */
- (jint)codePointAtWithInt:(jint)index;

/*!
 @since 1.5
 */
- (jint)codePointBeforeWithInt:(jint)index;

/*!
 @since 1.5
 */
- (jint)codePointCountWithInt:(jint)beginIndex
                      withInt:(jint)endIndex;

/*!
 @throws StringIndexOutOfBoundsException
 @since 1.2
 */
- (JavaLangStringBuffer *)delete__WithInt:(jint)start
                                  withInt:(jint)end;

/*!
 @throws StringIndexOutOfBoundsException
 @since 1.2
 */
- (JavaLangStringBuffer *)deleteCharAtWithInt:(jint)index;

- (void)ensureCapacityWithInt:(jint)minimumCapacity;

/*!
 @throws IndexOutOfBoundsException
 */
- (void)getCharsWithInt:(jint)srcBegin
                withInt:(jint)srcEnd
          withCharArray:(IOSCharArray *)dst
                withInt:(jint)dstBegin;

/*!
 @since 1.4
 */
- (jint)indexOfWithNSString:(NSString *)str;

/*!
 @since 1.4
 */
- (jint)indexOfWithNSString:(NSString *)str
                    withInt:(jint)fromIndex;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                            withBoolean:(jboolean)b;

/*!
 @throws IndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                               withChar:(jchar)c;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                          withCharArray:(IOSCharArray *)str;

/*!
 @throws StringIndexOutOfBoundsException
 @since 1.2
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)index
                          withCharArray:(IOSCharArray *)str
                                withInt:(jint)offset
                                withInt:(jint)len;

/*!
 @throws IndexOutOfBoundsException
 @since 1.5
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)dstOffset
               withJavaLangCharSequence:(id<JavaLangCharSequence>)s;

/*!
 @throws IndexOutOfBoundsException
 @since 1.5
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)dstOffset
               withJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                withInt:(jint)start
                                withInt:(jint)end;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                             withDouble:(jdouble)d;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                              withFloat:(jfloat)f;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                                withInt:(jint)i;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                               withLong:(jlong)l;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                                 withId:(id)obj;

/*!
 @throws StringIndexOutOfBoundsException
 */
- (JavaLangStringBuffer *)insertWithInt:(jint)offset
                           withNSString:(NSString *)str;

/*!
 @since 1.4
 */
- (jint)lastIndexOfWithNSString:(NSString *)str
                        withInt:(jint)fromIndex;

- (jint)length;

/*!
 @since 1.5
 */
- (jint)offsetByCodePointsWithInt:(jint)index
                          withInt:(jint)codePointOffset;

/*!
 @throws StringIndexOutOfBoundsException
 @since 1.2
 */
- (JavaLangStringBuffer *)replaceWithInt:(jint)start
                                 withInt:(jint)end
                            withNSString:(NSString *)str;

/*!
 @since JDK1.0.2
 */
- (JavaLangStringBuffer *)reverse;

/*!
 @throws IndexOutOfBoundsException
 - seealso: #length()
 */
- (void)setCharAtWithInt:(jint)index
                withChar:(jchar)ch;

/*!
 @throws IndexOutOfBoundsException
 - seealso: #length()
 */
- (void)setLengthWithInt:(jint)newLength;

/*!
 @throws IndexOutOfBoundsException
 @since 1.4
 */
- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end;

/*!
 @throws StringIndexOutOfBoundsException
 @since 1.2
 */
- (NSString *)substringWithInt:(jint)start;

/*!
 @throws StringIndexOutOfBoundsException
 @since 1.2
 */
- (NSString *)substringWithInt:(jint)start
                       withInt:(jint)end;

- (NSString *)description;

/*!
 @since 1.5
 */
- (void)trimToSize;

@end

J2OBJC_STATIC_INIT(JavaLangStringBuffer)

/*!
 @brief use serialVersionUID from JDK 1.0.2 for interoperability
 */
inline jlong JavaLangStringBuffer_get_serialVersionUID();
#define JavaLangStringBuffer_serialVersionUID 3388685877147921107LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangStringBuffer, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaLangStringBuffer_init(JavaLangStringBuffer *self);

FOUNDATION_EXPORT JavaLangStringBuffer *new_JavaLangStringBuffer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangStringBuffer *create_JavaLangStringBuffer_init();

FOUNDATION_EXPORT void JavaLangStringBuffer_initWithInt_(JavaLangStringBuffer *self, jint capacity);

FOUNDATION_EXPORT JavaLangStringBuffer *new_JavaLangStringBuffer_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangStringBuffer *create_JavaLangStringBuffer_initWithInt_(jint capacity);

FOUNDATION_EXPORT void JavaLangStringBuffer_initWithNSString_(JavaLangStringBuffer *self, NSString *str);

FOUNDATION_EXPORT JavaLangStringBuffer *new_JavaLangStringBuffer_initWithNSString_(NSString *str) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangStringBuffer *create_JavaLangStringBuffer_initWithNSString_(NSString *str);

FOUNDATION_EXPORT void JavaLangStringBuffer_initWithJavaLangCharSequence_(JavaLangStringBuffer *self, id<JavaLangCharSequence> seq);

FOUNDATION_EXPORT JavaLangStringBuffer *new_JavaLangStringBuffer_initWithJavaLangCharSequence_(id<JavaLangCharSequence> seq) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangStringBuffer *create_JavaLangStringBuffer_initWithJavaLangCharSequence_(id<JavaLangCharSequence> seq);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangStringBuffer)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangStringBuffer")
